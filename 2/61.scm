(load "60.scm")
(define (element-of-set? x set) 
	(cond ((null? set) false)
		((= x (car set)) true)
		((< x (car set)) false)
		(else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2) 
	(if (or (null? set1) (null? set2))
		'()
		(let ((x1 (car set1)) (x2 (car set2)))
			(cond ((= x1 x2)
				(cons x1 (intersection-set (cdr set1) (cdr set2))))
					((< x1 x2)
						(intersection-set (cdr set1) set2))
					((< x2 x1)
						(intersection-set set1 (cdr set2)))))))

(define (adjoin-set x set)
	(define (iter header tail)
		(if (null? tail)
			(append header (list x))
			(cond 
				((< x (car tail)) (append header (list x) tail))
				((= x (car tail)) set)
				(else (iter (append header (list (car tail))) (cdr tail))))))
	(iter (list) set))

(define (main parameters)
	(print (append '(1 2 3 4) '(4 5 6)))
	(print (adjoin-set 0 '(1 2 3 5 6)))
	(print (adjoin-set 4 '(1 2 3 5 6)))
	(print (adjoin-set 7 '(1 2 3 5 6)))
	(print (adjoin-set 2 '(1 2 3 5 6)))
)

